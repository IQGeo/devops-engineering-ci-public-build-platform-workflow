name: Reusable Build Workflow Template
description: Template for building module components with common configurations

on:
  workflow_call:
    inputs:
      version:
        description: 'Version to build'
        required: true
        type: string
      modules:
        description: 'Comma-separated list of modules to build'
        required: false
        type: string
        default: 'vector_tile_styles,reporting_examples,embeddedExamples,dev_db'        
      shortened_version:
        description: 'Shortened version for language packs repo'
        required: true
        type: string
      tags:
        description: 'Comma-separated list of all tags to apply'
        required: true
        type: string
      build_id:
        description: 'Unique build identifier'
        required: true
        type: string
      engineering_prefix:
        description: 'Engineering prefix to place multi arch images in ACR & Harbor'
        type: string
        default: devops_sandbox_engineering
      releases_prefix:
        description: 'Releases prefix to place multi arch images in ACR & Harbor'
        type: string
        default: devops_sandbox_releases
      is_release:
        description: 'Whether this is a pre-release or release version'
        required: true
        type: string
      build_qa_images:
        description: 'Whether to build QA images (platform with module)'
        type: boolean
        default: true
      namespace:
        description: 'Kubernetes namespace for the deployment'
        type: string
      pod_name:
        description: 'Kubernetes pod name to redeploy after images are built'
        type: string
        default: ''
        
    secrets:
      GH_TOKEN:
        required: true   
      HARBOR_USERNAME:
        required: true
      HARBOR_CLI_SECRET:
        required: true
      REGISTRY_USERNAME:
        required: true
      REGISTRY_PASSWORD:
        required: true

env:
  # Registry Configuration
  ACR_REGISTRY: "iqgeoproddev.azurecr.io"
  
  # External Workflow References
  MULTI_ARCH_WORKFLOW: "IQGeo/devops-engineering-ci-public-build-multi-arch-workflow/.github/workflows/build-multi-arch.yml@main"
  EDITIONS_WORKFLOW: "IQGeo/devops-engineering-ci-public-editions-workflow/.github/workflows/build-editions.yml@main"
  
  # Dockerfile Paths  
  INJECTOR_DOCKERFILE: "Dockerfile.injector"
  BUILD_DOCKERFILE: "deployment/dockerfile.build"
  APPSERVER_DOCKERFILE: "deployment/dockerfile.appserver"
  TOOLS_DOCKERFILE: "deployment/dockerfile.tools"
  QA_DOCKERFILE: "deployment/dockerfile.QAappserver"
  
  # Build Contexts
  ROOT_CONTEXT: "."
  DEPLOYMENT_CONTEXT: "./deployment"

run-name: Build ${{ inputs.version }}

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      modules_array: ${{ steps.modules.outputs.array }}
      hyphenated_module: ${{ steps.hyphenate.outputs.hyphenated_module }}
    steps:          
      - name: Process modules
        id: modules
        run: |
          # Convert comma-separated string to JSON array
          MODULES_JSON=$(echo "${{ inputs.modules }}" | jq -R 'split(",")' | tr -d '^\n')
          echo "array=$MODULES_JSON" >> $GITHUB_OUTPUT
          echo "Modules array: $MODULES_JSON"

      - name: Hyphenate modules
        id: hyphenate
        run: |
          # Convert module names with underscores to hyphens
          UNDERSCORE_MODULE=${{ fromJson(steps.modules.outputs.array)[0] }}
          HYPHENATED_MODULE=${UNDERSCORE_MODULE//_/-}
          echo "hyphenated_module=$HYPHENATED_MODULE" >> $GITHUB_OUTPUT
          echo "Hyphenated module name: $HYPHENATED_MODULE"
    
    
  # The module is the first item in the modules array defined in the setup step above 
  cut-artifacts:
    uses: ./.github/workflows/cut-platform.yml
    with:
      version: ${{ inputs.version }}
    secrets: inherit
    
  build-injectors:
    needs: [setup, cut-artifacts]
    strategy:
      matrix:
        module: ${{ fromJson(needs.setup.outputs.modules_array) }}
    uses: IQGeo/devops-engineering-ci-public-build-multi-arch-workflow/.github/workflows/build-multi-arch.yml@devops/ET-734-platform-workflow
    with:
      version: ${{ inputs.version }}
      dockerfile_path: "Dockerfile.injector"
      docker_context: "."
      module: ${{ matrix.module }}
      acr: "iqgeoproddev.azurecr.io"
      harbor: "harbor.delivery.iqgeo.cloud"
      updated_tags: ${{ inputs.tags }}
      build_id: ${{ inputs.build_id }}
      shortened_version: ${{ inputs.shortened_version }}
      is_release: ${{ inputs.is_release }}
      engineering_prefix: ${{ inputs.engineering_prefix }}/platform
      releases_prefix: ${{ inputs.releases_prefix }}
    secrets: inherit

  # build-platform-build:
  #   if: ${{ inputs.build_qa_images == true }}
  #   needs: [setup, build-injectors]
  #   uses: IQGeo/devops-engineering-ci-public-build-multi-arch-workflow/.github/workflows/build-multi-arch.yml@main
  #   with:
  #     version: ${{ inputs.version }}
  #     module: platform-${{ needs.setup.outputs.hyphenated_module }}-build
  #     dockerfile_path: "deployment/dockerfile.build"
  #     docker_context: "."
  #     acr: "iqgeoproddev.azurecr.io"
  #     harbor: "harbor.delivery.iqgeo.cloud"
  #     updated_tags: ${{ inputs.tags }}
  #     build_id: ${{ inputs.build_id }}
  #     is_release: ${{ inputs.is_release }}
  #     engineering_prefix: ${{ inputs.engineering_prefix }}
  #     releases_prefix: ${{ inputs.releases_prefix }}
  #   secrets: inherit
    
  # build-platform-components:
  #   if: ${{ inputs.build_qa_images == true }}
  #   needs: [setup, build-platform-build]
  #   strategy:
  #     matrix:
  #       include:
  #         - module: platform-${{ needs.setup.outputs.hyphenated_module }}-appserver
  #           dockerfile_path: deployment/dockerfile.appserver
  #         - module: platform-${{ needs.setup.outputs.hyphenated_module }}-tools  
  #           dockerfile_path: deployment/dockerfile.tools
  #   uses: IQGeo/devops-engineering-ci-public-build-multi-arch-workflow/.github/workflows/build-multi-arch.yml@main
  #   with:
  #     version: ${{ inputs.version }}
  #     module: ${{ matrix.module }}
  #     dockerfile_path: ${{ matrix.dockerfile_path }}
  #     docker_context: "./deployment"
  #     acr: "iqgeoproddev.azurecr.io"
  #     harbor: "harbor.delivery.iqgeo.cloud"
  #     updated_tags: ${{ inputs.tags }}
  #     build_id: ${{ inputs.build_id }}
  #     is_release: ${{ inputs.is_release }}
  #     engineering_prefix: ${{ inputs.engineering_prefix }}
  #     releases_prefix: ${{ inputs.releases_prefix }}
  #   secrets: inherit
    
  # build-qa-appserver:
  #   if: ${{ inputs.build_qa_images == true }}
  #   needs: [setup, build-platform-components]
  #   uses: IQGeo/devops-engineering-ci-public-build-multi-arch-workflow/.github/workflows/build-multi-arch.yml@main
  #   with:
  #     version: ${{ inputs.version }}
  #     module: platform-${{ needs.setup.outputs.hyphenated_module }}-qa-appserver
  #     dockerfile_path: "deployment/dockerfile.QAappserver"
  #     docker_context: "."
  #     acr: "iqgeoproddev.azurecr.io"
  #     harbor: "harbor.delivery.iqgeo.cloud"
  #     updated_tags: ${{ inputs.tags }}
  #     build_id: ${{ inputs.build_id }}
  #     is_release: ${{ inputs.is_release }}
  #     engineering_prefix: ${{ inputs.engineering_prefix }}
  #     releases_prefix: ${{ inputs.releases_prefix }}
  #   secrets: inherit

  # redeploy-eks-pod:
  #   if: ${{ inputs.namespace != '' && inputs.pod_name != '' && inputs.build_qa_images == true }}
  #   needs: [setup, build-platform-components]
  #   uses: IQGeo/devops-engineering-ci-redeploy-eks-pod/.github/workflows/redeploy-eks-pod.yml@main
  #   with:
  #     pod_name: ${{ inputs.pod_name }}
  #     namespace: ${{ inputs.namespace }}
  #   secrets: inherit
